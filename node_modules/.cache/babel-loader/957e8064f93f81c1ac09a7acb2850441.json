{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { toArray } from './util';\nimport { shouldEmbed, embedResources } from './embedResources';\nconst cssFetchCache = {};\n\nfunction fetchCSS(url) {\n  const cache = cssFetchCache[url];\n\n  if (cache != null) {\n    return cache;\n  }\n\n  const deferred = window.fetch(url).then(res => ({\n    url,\n    cssText: res.text()\n  }));\n  cssFetchCache[url] = deferred;\n  return deferred;\n}\n\nfunction embedFonts(meta) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return meta.cssText.then(raw => {\n      let cssText = raw;\n      const regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g;\n      const fontLocs = cssText.match(/url\\([^)]+\\)/g) || [];\n      const loadFonts = fontLocs.map(location => {\n        let url = location.replace(regexUrl, '$1');\n\n        if (!url.startsWith('https://')) {\n          url = new URL(url, meta.url).href;\n        } // eslint-disable-next-line promise/no-nesting\n\n\n        return window.fetch(url).then(res => res.blob()).then(blob => new Promise((resolve, reject) => {\n          const reader = new FileReader();\n\n          reader.onloadend = () => {\n            // Side Effect\n            cssText = cssText.replace(location, `url(${reader.result})`);\n            resolve([location, reader.result]);\n          };\n\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }));\n      }); // eslint-disable-next-line promise/no-nesting\n\n      return Promise.all(loadFonts).then(() => cssText);\n    });\n  });\n}\n\nfunction parseCSS(source) {\n  if (source == null) {\n    return [];\n  }\n\n  const result = [];\n  const commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi; // strip out comments\n\n  let cssText = source.replace(commentsRegex, '');\n  const keyframesRegex = new RegExp('((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})', 'gi'); // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    const matches = keyframesRegex.exec(cssText);\n\n    if (matches === null) {\n      break;\n    }\n\n    result.push(matches[0]);\n  }\n\n  cssText = cssText.replace(keyframesRegex, '');\n  const importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi; // to match css & media queries together\n\n  const combinedCSSRegex = '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' + '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})'; // unified regex\n\n  const unifiedRegex = new RegExp(combinedCSSRegex, 'gi'); // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    let matches = importRegex.exec(cssText);\n\n    if (matches === null) {\n      matches = unifiedRegex.exec(cssText);\n\n      if (matches === null) {\n        break;\n      } else {\n        importRegex.lastIndex = unifiedRegex.lastIndex;\n      }\n    } else {\n      unifiedRegex.lastIndex = importRegex.lastIndex;\n    }\n\n    result.push(matches[0]);\n  }\n\n  return result;\n}\n\nfunction getCSSRules(styleSheets) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const ret = [];\n    const deferreds = []; // First loop inlines imports\n\n    styleSheets.forEach(sheet => {\n      if ('cssRules' in sheet) {\n        try {\n          toArray(sheet.cssRules).forEach((item, index) => {\n            if (item.type === CSSRule.IMPORT_RULE) {\n              let importIndex = index + 1;\n              const url = item.href;\n              const deferred = fetchCSS(url).then(metadata => metadata ? embedFonts(metadata) : '').then(cssText => parseCSS(cssText).forEach(rule => {\n                try {\n                  sheet.insertRule(rule, rule.startsWith('@import') ? importIndex += 1 : sheet.cssRules.length);\n                } catch (error) {\n                  console.error('Error inserting rule from remote css', {\n                    rule,\n                    error\n                  });\n                }\n              })).catch(e => {\n                console.error('Error loading remote css', e.toString());\n              });\n              deferreds.push(deferred);\n            }\n          });\n        } catch (e) {\n          const inline = styleSheets.find(a => a.href == null) || document.styleSheets[0];\n\n          if (sheet.href != null) {\n            deferreds.push(fetchCSS(sheet.href).then(metadata => metadata ? embedFonts(metadata) : '').then(cssText => parseCSS(cssText).forEach(rule => {\n              inline.insertRule(rule, sheet.cssRules.length);\n            })).catch(err => {\n              console.error('Error loading remote stylesheet', err.toString());\n            }));\n          }\n\n          console.error('Error inlining remote css file', e.toString());\n        }\n      }\n    });\n    return Promise.all(deferreds).then(() => {\n      // Second loop parses rules\n      styleSheets.forEach(sheet => {\n        if ('cssRules' in sheet) {\n          try {\n            toArray(sheet.cssRules).forEach(item => {\n              ret.push(item);\n            });\n          } catch (e) {\n            console.error(`Error while reading CSS rules from ${sheet.href}`, e.toString());\n          }\n        }\n      });\n      return ret;\n    });\n  });\n}\n\nfunction getWebFontRules(cssRules) {\n  return cssRules.filter(rule => rule.type === CSSRule.FONT_FACE_RULE).filter(rule => shouldEmbed(rule.style.getPropertyValue('src')));\n}\n\nfunction parseWebFontRules(node) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      if (node.ownerDocument == null) {\n        reject(new Error('Provided element is not within a Document'));\n      }\n\n      resolve(toArray(node.ownerDocument.styleSheets));\n    }).then(styleSheets => getCSSRules(styleSheets)).then(getWebFontRules);\n  });\n}\n\nexport function getWebFontCSS(node, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return parseWebFontRules(node).then(rules => Promise.all(rules.map(rule => {\n      const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;\n      return embedResources(rule.cssText, baseUrl, options);\n    }))).then(cssTexts => cssTexts.join('\\n'));\n  });\n}\nexport function embedWebFonts(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return (options.fontEmbedCSS != null ? Promise.resolve(options.fontEmbedCSS) : getWebFontCSS(clonedNode, options)).then(cssText => {\n      const styleNode = document.createElement('style');\n      const sytleContent = document.createTextNode(cssText);\n      styleNode.appendChild(sytleContent);\n\n      if (clonedNode.firstChild) {\n        clonedNode.insertBefore(styleNode, clonedNode.firstChild);\n      } else {\n        clonedNode.appendChild(styleNode);\n      }\n\n      return clonedNode;\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["toArray","shouldEmbed","embedResources","cssFetchCache","fetchCSS","url","cache","deferred","window","fetch","then","res","cssText","text","embedFonts","meta","raw","regexUrl","fontLocs","match","loadFonts","map","location","replace","startsWith","URL","href","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","all","parseCSS","source","commentsRegex","keyframesRegex","RegExp","matches","exec","push","importRegex","combinedCSSRegex","unifiedRegex","lastIndex","getCSSRules","styleSheets","ret","deferreds","forEach","sheet","cssRules","item","index","type","CSSRule","IMPORT_RULE","importIndex","metadata","rule","insertRule","length","error","console","catch","e","toString","inline","find","a","document","err","getWebFontRules","filter","FONT_FACE_RULE","style","getPropertyValue","parseWebFontRules","node","ownerDocument","Error","getWebFontCSS","options","rules","baseUrl","parentStyleSheet","cssTexts","join","embedWebFonts","clonedNode","fontEmbedCSS","styleNode","createElement","sytleContent","createTextNode","appendChild","firstChild","insertBefore"],"sources":["../src/embedWebFonts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}