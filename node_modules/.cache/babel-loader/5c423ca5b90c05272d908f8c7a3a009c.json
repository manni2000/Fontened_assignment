{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getBlobFromURL } from './getBlobFromURL';\nimport { embedResources } from './embedResources';\nimport { getMimeType, isDataUrl, makeDataUrl, toArray } from './util';\n\nfunction embedBackground(clonedNode, options) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const background = (_a = clonedNode.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue('background');\n\n    if (!background) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return Promise.resolve(background).then(cssString => embedResources(cssString, null, options)).then(cssString => {\n      clonedNode.style.setProperty('background', cssString, clonedNode.style.getPropertyPriority('background'));\n      return clonedNode;\n    });\n  });\n}\n\nfunction embedImageNode(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!(clonedNode instanceof HTMLImageElement && !isDataUrl(clonedNode.src)) && !(clonedNode instanceof SVGImageElement && !isDataUrl(clonedNode.href.baseVal))) {\n      return Promise.resolve(clonedNode);\n    }\n\n    const src = clonedNode instanceof HTMLImageElement ? clonedNode.src : clonedNode.href.baseVal;\n    return Promise.resolve(src).then(url => getBlobFromURL(url, options)).then(data => makeDataUrl(data.blob, getMimeType(src) || data.contentType)).then(dataURL => new Promise((resolve, reject) => {\n      clonedNode.onload = resolve;\n      clonedNode.onerror = reject;\n\n      if (clonedNode instanceof HTMLImageElement) {\n        clonedNode.srcset = '';\n        clonedNode.src = dataURL;\n      } else {\n        clonedNode.href.baseVal = dataURL;\n      }\n    })).then(() => clonedNode, () => clonedNode);\n  });\n}\n\nfunction embedChildren(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const children = toArray(clonedNode.childNodes); // eslint-disable-next-line no-use-before-define\n\n    const deferreds = children.map(child => embedImages(child, options));\n    return Promise.all(deferreds).then(() => clonedNode);\n  });\n}\n\nexport function embedImages(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!(clonedNode instanceof Element)) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return Promise.resolve(clonedNode).then(node => embedBackground(node, options)).then(node => embedImageNode(node, options)).then(node => embedChildren(node, options));\n  });\n}","map":{"version":3,"mappings":"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","names":["getBlobFromURL","embedResources","getMimeType","isDataUrl","makeDataUrl","toArray","embedBackground","clonedNode","options","background","style","_a","getPropertyValue","Promise","resolve","then","cssString","setProperty","getPropertyPriority","embedImageNode","HTMLImageElement","src","SVGImageElement","href","baseVal","url","data","blob","contentType","dataURL","reject","onload","onerror","srcset","embedChildren","children","childNodes","deferreds","map","child","embedImages","all","Element","node"],"sources":["../src/embedImages.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}