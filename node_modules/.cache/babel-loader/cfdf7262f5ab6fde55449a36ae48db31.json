{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getBlobFromURL } from './getBlobFromURL';\nimport { clonePseudoElements } from './clonePseudoElements';\nimport { createImage, getMimeType, makeDataUrl, toArray } from './util';\n\nfunction cloneCanvasElement(node) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const dataURL = node.toDataURL();\n\n    if (dataURL === 'data:,') {\n      return Promise.resolve(node.cloneNode(false));\n    }\n\n    return createImage(dataURL);\n  });\n}\n\nfunction cloneVideoElement(node, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return Promise.resolve(node.poster).then(url => getBlobFromURL(url, options)).then(data => makeDataUrl(data.blob, getMimeType(node.poster) || data.contentType)).then(dataURL => createImage(dataURL));\n  });\n}\n\nfunction cloneSingleNode(node, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (node instanceof HTMLCanvasElement) {\n      return cloneCanvasElement(node);\n    }\n\n    if (node instanceof HTMLVideoElement && node.poster) {\n      return cloneVideoElement(node, options);\n    }\n\n    return Promise.resolve(node.cloneNode(false));\n  });\n}\n\nconst isSlotElement = node => node.tagName != null && node.tagName.toUpperCase() === 'SLOT';\n\nfunction cloneChildren(nativeNode, clonedNode, options) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const children = isSlotElement(nativeNode) && nativeNode.assignedNodes ? toArray(nativeNode.assignedNodes()) : toArray(((_a = nativeNode.shadowRoot) !== null && _a !== void 0 ? _a : nativeNode).childNodes);\n\n    if (children.length === 0 || nativeNode instanceof HTMLVideoElement) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return children.reduce((deferred, child) => deferred // eslint-disable-next-line no-use-before-define\n    .then(() => cloneNode(child, options)).then(clonedChild => {\n      // eslint-disable-next-line promise/always-return\n      if (clonedChild) {\n        clonedNode.appendChild(clonedChild);\n      }\n    }), Promise.resolve()).then(() => clonedNode);\n  });\n}\n\nfunction cloneCSSStyle(nativeNode, clonedNode) {\n  const source = window.getComputedStyle(nativeNode);\n  const target = clonedNode.style;\n\n  if (!target) {\n    return;\n  }\n\n  if (source.cssText) {\n    target.cssText = source.cssText;\n  } else {\n    toArray(source).forEach(name => {\n      target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name));\n    });\n  }\n}\n\nfunction cloneInputValue(nativeNode, clonedNode) {\n  if (nativeNode instanceof HTMLTextAreaElement) {\n    clonedNode.innerHTML = nativeNode.value;\n  }\n\n  if (nativeNode instanceof HTMLInputElement) {\n    clonedNode.setAttribute('value', nativeNode.value);\n  }\n}\n\nfunction decorate(nativeNode, clonedNode) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!(clonedNode instanceof Element)) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return Promise.resolve().then(() => cloneCSSStyle(nativeNode, clonedNode)).then(() => clonePseudoElements(nativeNode, clonedNode)).then(() => cloneInputValue(nativeNode, clonedNode)).then(() => clonedNode);\n  });\n}\n\nexport function cloneNode(node, options, isRoot) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!isRoot && options.filter && !options.filter(node)) {\n      return Promise.resolve(null);\n    }\n\n    return Promise.resolve(node).then(clonedNode => cloneSingleNode(clonedNode, options)).then(clonedNode => cloneChildren(node, clonedNode, options)).then(clonedNode => decorate(node, clonedNode));\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,WAAnC,EAAgDC,OAAhD,QAA+D,QAA/D;;AAEA,SAAeC,kBAAf,CAAkCC,IAAlC,EAAyD;;IACvD,MAAMC,OAAO,GAAGD,IAAI,CAACE,SAAL,EAAhB;;IACA,IAAID,OAAO,KAAK,QAAhB,EAA0B;MACxB,OAAOE,OAAO,CAACC,OAAR,CAAgBJ,IAAI,CAACK,SAAL,CAAe,KAAf,CAAhB,CAAP;IACD;;IAED,OAAOV,WAAW,CAACM,OAAD,CAAlB;EACD;AAAA;;AAED,SAAeK,iBAAf,CAAiCN,IAAjC,EAAyDO,OAAzD,EAAyE;;IACvE,OAAOJ,OAAO,CAACC,OAAR,CAAgBJ,IAAI,CAACQ,MAArB,EACJC,IADI,CACEC,GAAD,IAASjB,cAAc,CAACiB,GAAD,EAAMH,OAAN,CADxB,EAEJE,IAFI,CAEEE,IAAD,IACJd,WAAW,CAACc,IAAI,CAACC,IAAN,EAAYhB,WAAW,CAACI,IAAI,CAACQ,MAAN,CAAX,IAA4BG,IAAI,CAACE,WAA7C,CAHR,EAKJJ,IALI,CAKER,OAAD,IAAaN,WAAW,CAACM,OAAD,CALzB,CAAP;EAMD;AAAA;;AAED,SAAea,eAAf,CACEd,IADF,EAEEO,OAFF,EAEkB;;IAEhB,IAAIP,IAAI,YAAYe,iBAApB,EAAuC;MACrC,OAAOhB,kBAAkB,CAACC,IAAD,CAAzB;IACD;;IAED,IAAIA,IAAI,YAAYgB,gBAAhB,IAAoChB,IAAI,CAACQ,MAA7C,EAAqD;MACnD,OAAOF,iBAAiB,CAACN,IAAD,EAAOO,OAAP,CAAxB;IACD;;IAED,OAAOJ,OAAO,CAACC,OAAR,CAAgBJ,IAAI,CAACK,SAAL,CAAe,KAAf,CAAhB,CAAP;EACD;AAAA;;AAED,MAAMY,aAAa,GAAIjB,IAAD,IACpBA,IAAI,CAACkB,OAAL,IAAgB,IAAhB,IAAwBlB,IAAI,CAACkB,OAAL,CAAaC,WAAb,OAA+B,MADzD;;AAGA,SAAeC,aAAf,CACEC,UADF,EAEEC,UAFF,EAGEf,OAHF,EAGkB;;;;IAEhB,MAAMgB,QAAQ,GACZN,aAAa,CAACI,UAAD,CAAb,IAA6BA,UAAU,CAACG,aAAxC,GACI1B,OAAO,CAAIuB,UAAU,CAACG,aAAX,EAAJ,CADX,GAEI1B,OAAO,CAAI,CAAC,gBAAU,CAAC2B,UAAX,MAAqB,IAArB,IAAqBC,aAArB,GAAqBA,EAArB,GAAyBL,UAA1B,EAAsCM,UAA1C,CAHb;;IAKA,IAAIJ,QAAQ,CAACK,MAAT,KAAoB,CAApB,IAAyBP,UAAU,YAAYL,gBAAnD,EAAqE;MACnE,OAAOb,OAAO,CAACC,OAAR,CAAgBkB,UAAhB,CAAP;IACD;;IAED,OAAOC,QAAQ,CACZM,MADI,CAEH,CAACC,QAAD,EAAWC,KAAX,KACED,QAAQ,CACN;IADM,CAELrB,IAFH,CAEQ,MAAMJ,SAAS,CAAC0B,KAAD,EAAQxB,OAAR,CAFvB,EAGGE,IAHH,CAGSuB,WAAD,IAAoC;MACxC;MACA,IAAIA,WAAJ,EAAiB;QACfV,UAAU,CAACW,WAAX,CAAuBD,WAAvB;MACD;IACF,CARH,CAHC,EAYH7B,OAAO,CAACC,OAAR,EAZG,EAcJK,IAdI,CAcC,MAAMa,UAdP,CAAP;;AAeD;;AAED,SAASY,aAAT,CAA8Cb,UAA9C,EAA6DC,UAA7D,EAA0E;EACxE,MAAMa,MAAM,GAAGC,MAAM,CAACC,gBAAP,CAAwBhB,UAAxB,CAAf;EACA,MAAMiB,MAAM,GAAGhB,UAAU,CAACiB,KAA1B;;EAEA,IAAI,CAACD,MAAL,EAAa;IACX;EACD;;EAED,IAAIH,MAAM,CAACK,OAAX,EAAoB;IAClBF,MAAM,CAACE,OAAP,GAAiBL,MAAM,CAACK,OAAxB;EACD,CAFD,MAEO;IACL1C,OAAO,CAASqC,MAAT,CAAP,CAAwBM,OAAxB,CAAiCC,IAAD,IAAS;MACvCJ,MAAM,CAACK,WAAP,CACED,IADF,EAEEP,MAAM,CAACS,gBAAP,CAAwBF,IAAxB,CAFF,EAGEP,MAAM,CAACU,mBAAP,CAA2BH,IAA3B,CAHF;IAKD,CAND;EAOD;AACF;;AAED,SAASI,eAAT,CAAgDzB,UAAhD,EAA+DC,UAA/D,EAA4E;EAC1E,IAAID,UAAU,YAAY0B,mBAA1B,EAA+C;IAC7CzB,UAAU,CAAC0B,SAAX,GAAuB3B,UAAU,CAAC4B,KAAlC;EACD;;EAED,IAAI5B,UAAU,YAAY6B,gBAA1B,EAA4C;IAC1C5B,UAAU,CAAC6B,YAAX,CAAwB,OAAxB,EAAiC9B,UAAU,CAAC4B,KAA5C;EACD;AACF;;AAED,SAAeG,QAAf,CACE/B,UADF,EAEEC,UAFF,EAEe;;IAEb,IAAI,EAAEA,UAAU,YAAY+B,OAAxB,CAAJ,EAAsC;MACpC,OAAOlD,OAAO,CAACC,OAAR,CAAgBkB,UAAhB,CAAP;IACD;;IAED,OAAOnB,OAAO,CAACC,OAAR,GACJK,IADI,CACC,MAAMyB,aAAa,CAACb,UAAD,EAAaC,UAAb,CADpB,EAEJb,IAFI,CAEC,MAAMf,mBAAmB,CAAC2B,UAAD,EAAaC,UAAb,CAF1B,EAGJb,IAHI,CAGC,MAAMqC,eAAe,CAACzB,UAAD,EAAaC,UAAb,CAHtB,EAIJb,IAJI,CAIC,MAAMa,UAJP,CAAP;EAKD;AAAA;;AAED,OAAM,SAAgBjB,SAAhB,CACJL,IADI,EAEJO,OAFI,EAGJ+C,MAHI,EAGY;;IAEhB,IAAI,CAACA,MAAD,IAAW/C,OAAO,CAACgD,MAAnB,IAA6B,CAAChD,OAAO,CAACgD,MAAR,CAAevD,IAAf,CAAlC,EAAwD;MACtD,OAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;IACD;;IAED,OAAOD,OAAO,CAACC,OAAR,CAAgBJ,IAAhB,EACJS,IADI,CACEa,UAAD,IAAgBR,eAAe,CAACQ,UAAD,EAAaf,OAAb,CADhC,EAEJE,IAFI,CAEEa,UAAD,IAAgBF,aAAa,CAACpB,IAAD,EAAOsB,UAAP,EAAmBf,OAAnB,CAF9B,EAGJE,IAHI,CAGEa,UAAD,IAAgB8B,QAAQ,CAACpD,IAAD,EAAOsB,UAAP,CAHzB,CAAP;EAID;AAAA","names":["getBlobFromURL","clonePseudoElements","createImage","getMimeType","makeDataUrl","toArray","cloneCanvasElement","node","dataURL","toDataURL","Promise","resolve","cloneNode","cloneVideoElement","options","poster","then","url","data","blob","contentType","cloneSingleNode","HTMLCanvasElement","HTMLVideoElement","isSlotElement","tagName","toUpperCase","cloneChildren","nativeNode","clonedNode","children","assignedNodes","shadowRoot","_a","childNodes","length","reduce","deferred","child","clonedChild","appendChild","cloneCSSStyle","source","window","getComputedStyle","target","style","cssText","forEach","name","setProperty","getPropertyValue","getPropertyPriority","cloneInputValue","HTMLTextAreaElement","innerHTML","value","HTMLInputElement","setAttribute","decorate","Element","isRoot","filter"],"sources":["../src/cloneNode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}